{# INPUTS: "contextBundle" is a ContextBundle, "resultsBundle" is a ResultsBundle #}
--- Optimal cut sets report ---
Network name: {{contextBundle.getNetworkName()}}

Node names from column: {{contextBundle.getNodeNameColumnName()}}


{% if contextBundle.getSourceNodes() is not null %}
Source nodes:
{{contextBundle.getNodeNames(contextBundle.getSourceNodes()) | join(', ')}}
{% else  %}
No source nodes selected.
{% endif %}


{% if contextBundle.getTargetNodes() is not null %}
Target nodes:
{{contextBundle.getNodeNames(contextBundle.getTargetNodes()) | join(', ')}}
{% else %}
No target nodes selected.
{% endif %}


{% if contextBundle.getOffTargetNodes() is not null %}
Off-target nodes:
{{contextBundle.getNodeNames(contextBundle.getOffTargetNodes()) | join(', ')}}
{% else %}
No off-target nodes selected.
{% endif %}


Path-finding algorithm: {{contextBundle.getPathFindingAlgorithm().description()}}

Found {{resultsBundle.getPathsToTargets.size()}} elementary paths and {{resultsBundle.getElementaryNodes().size()}} elementary nodes.

Search times: {{resultsBundle.getPathsToTargetsExecutionSeconds()}}s. for targets, {{resultsBundle.getPathsToOffTargetsExecutionSeconds()}}s. for off-targets.

{% if resultsBundle.getPathsToTargets() is not empty %}
Paths to target nodes:
{% for path in resultsBundle.getPathsToTargets() %}
{{contextBundle.pathString(path)}}

{% endfor %}
{% else %}
No paths to target nodes found.
{% endif %}

{% if resultsBundle.getPathsToOffTargets() is not empty %}
Paths to off-target nodes:
{% for path in resultsBundle.getPathsToOffTargets() %}
{{contextBundle.pathString(path)}}

{% endfor %}
{% else %}
No paths to off-target nodes found.
{% endif %}



Scoring algorithm: {{contextBundle.getOCSANAAlgorithm().description()}}

Computed OCSANA scores for elementary nodes in {{resultsBundle.getOCSANAScoringExecutionSeconds()}}s.

Elementary node{% for target in contextBundle.getTargetNodes() %}       {{contextBundle.getNodeName(target)}}{% endfor %}

EFFECT_ON_TARGETS data for all elementary nodes:
{% for node in resultsBundle.getElementaryNodes() %}
{{contextBundle.getNodeName(node)}}{% for target in contextBundle.getTargetNodes() %}   {{resultsBundle.getOCSANAScores().EFFECT_ON_TARGETS(node, target)}}{% endfor %}
{% endfor %}

{% if not resultsBundle.mhsFindingWasCanceled() %}
MHS algorithm: {{contextBundle.getMHSAlgorithm().description()}}

Found {{resultsBundle.getCIs().size()}} CIs in {{resultsBundle.getMHSExecutionSeconds()}}s.

Scoring data for all CIs using paths as signaling object:
Cut set	Size	OCSANA score	Target score	Side-effect score
{% for ci in resultsBundle.getCIs() %}
{{ci.interventionNodesString()}}	{{ci.size()}}	{{resultsBundle.getOCSANAScores().OCSANA(ci.getNodes())}}	{{resultsBundle.getOCSANAScores().EFFECT_ON_TARGETS(ci.getNodes())}}	{{resultsBundle.getOCSANAScores().SIDE_EFFECTS(ci.getNodes())}}

{% endfor %}
{% else %}
CI generation canceled.
{% endif %}

{% if contextBundle.getcomputeMFRs() %}
Minimal Functional Route finding algorithm: {{contextBundle.getMFRAlgorithm().description()}}
Search times: {{resultsBundle.getMFRExecutionSeconds()}}s. for targets, {{resultsBundle.getMFRsToOffTargetsExecutionSeconds()}}s. for off-targets.


{% if resultsBundle.getMFRs() is not empty %}
Minimal Functional Routes to target nodes:
Found  {{resultsBundle.getMFRs.size()}} minimal functional routes to targets.
{% for mfr in resultsBundle.getMFRs() %}
{{contextBundle.MFRString(mfr)}}

{% endfor %}
{% else %}
No Minimal Functional Routes to target nodes found.
{% endif %}


{% if resultsBundle.getMFRToOffTargets() is not empty %}
Minimal Functional Routes to off-target nodes: 
Found  {{resultsBundle.getMFRToOffTargets().size()}} minimal functional routes to off-targets.
{% for mfr in resultsBundle.getMFRToOffTargets() %}
{{contextBundle.MFRString(mfr)}}

{% endfor %}




{% else %}
No Minimal Functional Routes to off-target nodes found.
{% endif %}

{% if not resultsBundle.MHSOFMFRSFindingWasCanceled() %}

Found {{resultsBundle.getMHSOFMFRS().size()}} CIs in {{resultsBundle.getMHSOFMFRSExecutionSeconds()}}s.


Scoring data for all CIs using paths as signaling object:
Cut set	Size	OCSANA score	Target score	Side-effect score
{% for ci in resultsBundle.getMHSOFMFRS() %}
{{ci.interventionNodesString()}}	{{ci.size()}}	{{resultsBundle.getOCSANAScores().OCSANA(ci.getNodes())}}	{{resultsBundle.getOCSANAScores().EFFECT_ON_TARGETS(ci.getNodes())}}	{{resultsBundle.getOCSANAScores().SIDE_EFFECTS(ci.getNodes())}}

{% endfor %}
{% endif %}
{% endif %}




Prioritization configuration

{% if contextBundle.getTargetsToActivate() is not empty %}
Targets to activate:
{{contextBundle.getNodeNames(contextBundle.getTargetsToActivate()) | join(', ')}}
{% else %}
No targets to activate.
{% endif %}

{% if contextBundle.getTargetsToDeactivate() is not empty %}
Targets to deactivate:
{{contextBundle.getNodeNames(contextBundle.getTargetsToDeactivate()) | join(', ')}}
{% else %}
No targets to deactivate.
{% endif %}

Sign assignment

Sign assignment algorithm: {{contextBundle.getCISignAlgorithm().description()}}
TODO: display sign assignment results

Signed intervention scoring algorithm: {{contextBundle.getSIScoringAlgorithm().description}}
TODO: display signed intervention scoring results
